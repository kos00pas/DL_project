Introduction: USA Abstract This is the second of three planned papers describing zap a satisﬁability engine that substantially generalizes existing tools while retaining the performance characteristics of modern high performance solvers The fundamental idea underlying zap is that many problems passed to such engines contain rich internal structure that is obscured by the Boolean representation used our goal is to deﬁne a representation in which this structure is apparent and can easily be exploited to improve computational performance This paper presents the theoretical basis for the ideas underlying zap arguing that existing ideas in this area exploit a single recurring structure in that multiple database axioms can be obtained by operating on a single axiom using a subgroup of the group of permutations on the literals in the problem We argue that the group structure precisely captures the general structure at which earlier approaches hinted and give numerous examples of its use We go on to extend the DavisPutnamLogemannLoveland inference procedure to this broader setting and show that earlier computational improvements are either subsumed or left intact by the new method The third paper in this series discusses zaps implementation and presents experimental performance results 1 Introduction The rows and columns are described on this page and the next eﬃciency proof propagation learning of repn length resolution technique method SAT  EEE  watched literals relevance cardinality exponential PE not unique watched literals relevance pseudo Boolean exponential PE unique watched literals  strengthening symmetry  EEE not believed in P same as sat same as sat QPROP exponential  in P using reasons exp improvement  ﬁrstorder The rows of the table correspond to observations regarding existing representations used in satisﬁability research as reﬂected in the labels in the ﬁrst column2 1 SAT refers to conventional Boolean satisﬁability work representing information as conjunctions of disjunctions of literals  2 cardinality refers to the use of counting clauses if we think of a conventional disjunction of literals ili as X i li 1 then a cardinality clause is one of the form X Please see the preceding paper zap1 Dixon et al 2004b for a fuller explanation and for a relatively comprehensive list of references where the earlier work is discussed 482 ZAP 2 Theory 1 Eﬃciency of representation measures the extent to which a single axiom in a proposed framework can replace many in cnf For cardinality pseudoBoolean and quantiﬁed languages it is possible that exponential savings are achieved We argued that such savings were possible but relatively unlikely for cardinality and pseudo Boolean encodings but were relatively likely for qprop 2 Proof length gives the minimum proof length for the representation on three classes of problems the pigeonhole problem parity problems due to Tseitin  and clique coloring problems  An E indicates exponential proof length P indicates polynomial length While symmetryexploitation techniques can provide polynomiallength proofs in certain instances the method is so brittle against changes in the axiomatization that we do not regard this as a polynomial approach in general 3 Resolution indicates the extent to which resolution can be lifted to a broader set ting This is straightforward in the pseudoBoolean case cardinality clauses have the problem that the most natural resolvent of two cardinality clauses may not be a car dinality clause and there may be many cardinality clauses that could be derived as a result Systems that exploit local symmetries must search for such symmetries at each inference step a problem that is not believed to be in P Provided that reasons are maintained inference remains well deﬁned for quantiﬁed axioms requiring only the introduction of a linear complexity uniﬁcation step 4 Propagation technique describes the techniques used to draw conclusions from an existing partial assignment of values to variables For all of the systems except qprop Zhang and Stickels watched literals idea Moskewicz et al 2001 Zhang  Stickel 2000 is the most eﬃcient mechanism known This approach cannot be lifted to qprop but a somewhat simpler method can be lifted and averagecase exponential savings obtained as a result  5 Learning method gives the technique typically used to save conclusions as the in ference proceeds In general relevancebounded learning  is the most eﬀective technique known here It can be augmented with strengthening  in the pseudoBoolean case and with ﬁrstorder reasoning if quantiﬁed formulae are present Our goal in the current paper is to add a single line to the above table 483 Dixon Ginsberg Luks  Parkes eﬃciency proof propagation learning of repn length resolution technique method SAT  EEE  watched literals relevance cardinality exponential PE not unique watched literals relevance pseudo Boolean exponential PE unique watched literals  strengthening symmetry  EEE not believed in P same as sat same as sat QPROP exponential  in P using reasons exp improvement  ﬁrstorder ZAP exponential PPP in P using reasons watched literals exp improvement  ﬁrstorder  parity  others Zap is the approach to inference that is the focus of this series of papers The basic idea in zap is that in realistic problems many Boolean clauses are versions of a single clause We will make this notion precise shortly at this point one might think of all of the instances of a quantiﬁed clause as being versions of any particular ground instance The versions it will turn out correspond to permutations on the set of literals in the problem As an example suppose that we are tying to prove that it is impossible to put n  1 pigeons into n holes if each pigeon is to get its own hole A Boolean axiomatization of this problem will include the axioms p11 p21 p12 p22    p1n p2n p11 p31 p12 p32    p1n p3n    p11 pn11 p12 pn12    p1n pn1n p21 p31 p22 p32    p2n p3n    p21 pn11 p22 pn12    p2n pn1n    pn1 The second column refers to hole two and so on It is fairly clear that all of these axioms can be reconstructed from the ﬁrst by interchanging the pigeons and the holes and it is this intuition that zap attempts to capture What makes this approach interesting is the fact that instead of reasoning with a large set of clauses it becomes possible to reason with a single clause instance and a set of permutations As we will see the sets of permutations that occur naturally are highly structured sets called groups and exploiting this structure can lead to signiﬁcant eﬃciency gains in both representation and reasoning Some further comments on the above table 484 ZAP 2 Theory  Unlike cardinality and pseudoBoolean methods which seem unlikely to achieve ex ponential reductions in problem size in practice and qprop which seems likely to achieve such reductions zap is guaranteed when the requisite structure is present to replace a set of n axioms with a single axiom of size at most v log where v is the number of variables in the problem Proposition 48  The fundamental inference step in zap is in NP with respect to the zap representation and therefore has complexity no worse than exponential in the representation size ie polynomial in the number of Boolean axioms being resolved In practice the average case complexity appears to be loworder polynomial in the size of the zap representation ie polynomial in the logarithm of the number of Boolean axioms being resolved Dixon et al 2004a
Problem and Solution: No problem or solution section found.
Conclusion: Theory Proposition 43 Let S be a set of ground clauses and  an equivalent augmented clause where G is represented by generators It is possible in polynomial time to ﬁnd a set of generators ω1     ωk where k log2 G and G  ω1     ωk Proof Even the simplest approach suﬃces If G  gi checking to see if gi ω1     ωj for each generator gi can be performed in polynomial time using a wellknown method of Sims Dixon et al 2004a Deﬁnition A2 Let G Sym We will say that G acts transitively on S if for any x y S there is a g G with xg  y Proposition 48 Let  be an augmented clause with d distinct instances Then there is a subgroup H G that can be described using Olog2 generators such that    Furthermore given d and generators for G there is a Monte Carlo polynomialtime algorithm for constructing the generators of such an H Proof The basic ideas in the proof follow methods introduced by Babai Luks and Ser ess  The proof of this particular result is a bit more involved than the others in this paper and following it is likely to require an existing familiarity with group theory Let D be the set of instances of  so that G acts transitively on D Now consider a sequence g1 g2    of uniformly distributed random elements of G and for each r 0 let Hr  g1 g2     grin particular H0  Ø 1 Suppose that Hr1 does not act transitively on D and let K be any orbit of Hr1 in D Since GK is a proper subgroup of G Lagranges theorem implies that the probability that gr GK is 1 2 For ground clauses c1 and c2 and a permutation ω Wn resolveω ω  ωresolve Proof Suppose that the literal being resolved on is l so that if we think of c1 and c2 as being represented simply by the literals they contain the resolvent corresponds to c1 c2 l l Permuting with ω gives us ω ω ω ωl  ω ω ω ω  where the equality is a consequence of the fact that the permutation in question is a member of Wn instead of simply S2n Then if no terms in p and q except for tp and tq have common instances  the result of resolving p and q in the conventional lifted sense is equivalent to resolve  Proof The proof is already contained in the discussion surrounding the example in the main text The base instance of the augmented resolvent is clearly an instance of the quantiﬁed resolution for the group we have already remarked that the group of stable extensions of the two embeddings corresponds simply to any bindings for the variables in the resolvents that can be extended to a permutation of all of the variables in question This means that the bindings must be consistent with regard to the values selected for shared terms and no two distinct quantiﬁed literals are mapped to identical ground atoms The latter condition follows from the assumption that the nonresolving literals have no common ground instances Proposition 64 There is an augmented resolution proof of polynomial size of the mutual unsatisﬁability of  and  Proof We begin by explaining how the proof goes generally and only subsequently provide the details From the fact that the ﬁrst pigeon has to be in one of the n holes we can conclude that one of the ﬁrst two pigeons must be in one of the last n 1 holes since these ﬁrst two pigeons cant both be in the ﬁrst hole Now one of the ﬁrst three pigeons must be in one of the last n 2 holes and so on until we conclude that one of the ﬁrst n pigeons must be in the last hole Similarly one of the ﬁrst n pigeons must be in each hole leaving no hole for the ﬁnal pigeon To formalize this we will write Ak for the fact that one of the ﬁrst k pigeons must be in one of the last n  1 k holes Ak  _ pij Now note that the only holes mentioned in the disjunction on the right of the above expression are the k  1st and higher so that we can apply the group G to conclude pk1m  _