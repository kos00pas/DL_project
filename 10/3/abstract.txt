This is the second of three planned papers describing zap a satisﬁability engine that substantially generalizes existing tools while retaining the performance characteristics of modern high performance solvers The fundamental idea underlying zap is that many problems passed to such engines contain rich internal structure that is obscured by the Boolean representation used our goal is to deﬁne a representation in which this structure is apparent and can easily be exploited to improve computational performance This paper presents the theoretical basis for the ideas underlying zap arguing that existing ideas in this area exploit a single recurring structure in that multiple database axioms can be obtained by operating on a single axiom using a subgroup of the group of permutations on the literals in the problem We argue that the group structure precisely captures the general structure at which earlier approaches hinted and give numerous examples of its use We go on to extend the DavisPutnamLogemannLoveland inference procedure to this broader setting and show that earlier computational improvements are either subsumed or left intact by the new method The third paper in this series discusses zaps implementation and presents experimental performance results 1 Introduction The rows and columns are described on this page and the next eﬃciency proof propagation learning of repn length resolution technique method SAT  EEE  watched literals relevance cardinality exponential PE not unique watched literals relevance pseudo Boolean exponential PE unique watched literals  strengthening symmetry  EEE not believed in P same as sat same as sat QPROP exponential  in P using reasons exp improvement  ﬁrstorder The rows of the table correspond to observations regarding existing representations used in satisﬁability research as reﬂected in the labels in the ﬁrst column2 1 SAT refers to conventional Boolean satisﬁability work representing information as conjunctions of disjunctions of literals  2 cardinality refers to the use of counting clauses if we think of a conventional disjunction of literals ili as X i li 1 then a cardinality clause is one of the form X